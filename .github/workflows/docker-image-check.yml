name: Docker Image Build and Check

on:
  workflow_dispatch:
    inputs:
      IMAGE_NAME:
        description: 'Docker image name'
        required: true
        type: string

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper timestamp comparison

      - name: Install jq
        run: |
          echo "::group::jq installation"
          sudo apt-get update && sudo apt-get install -y jq
          echo "::endgroup::"
          
        
      - name: Get Dockerfile timestamp
        id: dockerfile-timestamp
        run: |
          COMMIT_TIMESTAMP=$(git log -1 --format=%ct Dockerfile || echo 0)
          echo "timestamp=$COMMIT_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Dockerfile timestamp: $COMMIT_TIMESTAMP"
      
      - name: Get image timestamp from GHCR
        id: image-timestamp
        env:
          GHCR_TOKEN: ${{ secrets.GHCR_PAT }}
        run: |
          LAST_PUSH_TIMESTAMP=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            "https://api.github.com/orgs/niranjanorgground/packages/container/${{ inputs.IMAGE_NAME }}/versions" | \
            jq -r '.[0].created_at // empty' | \
            xargs -I {} date -d {} +%s 2>/dev/null || echo 0)
          echo "timestamp=$LAST_PUSH_TIMESTAMP" >> $GITHUB_OUTPUT
          echo "Image timestamp: $LAST_PUSH_TIMESTAMP"
            
      - name: Build and push Docker image 
        id: docker-build
        env:
          DOCKERFILE_TIMESTAMP: ${{ steps.dockerfile-timestamp.outputs.timestamp }}
          IMAGE_TIMESTAMP: ${{ steps.image-timestamp.outputs.timestamp }}
        run: |
          if [ "${{ steps.dockerfile-timestamp.outputs.timestamp }}" -gt "${{ steps.image-timestamp.outputs.timestamp }}" ]; then
            echo "::notice title=Build Status::ðŸš€ Dockerfile has been updated. Building new image..."
            
            # Generate new tag using current timestamp
            IMAGE_TAG=$(date +'%Y%m%d%H%M%S')
            echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
            
            # Login to GHCR
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Build image with both latest and timestamped tags
            docker build -t ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:latest \
                        -t ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:$IMAGE_TAG \
                        -f Dockerfile .
            
            # Push both tags
            docker push ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:latest
            docker push ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:$IMAGE_TAG
            
            echo "::notice title=Build Status::âœ… Successfully built and pushed new image with tag: $IMAGE_TAG"
          else
            echo "::notice title=Build Status::ðŸ›‘ No updates to Dockerfile. Using existing image."
          fi
