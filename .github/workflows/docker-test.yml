name: ARC Scaleset Creation with Docker Image Check

on:
  workflow_dispatch:
    inputs:
      IMAGE_NAME:
        description: 'Docker image name'
        required: true

jobs:
  check-and-build-docker-image:
    runs-on: ubuntu-latest
    outputs:
      docker_image_tag: ${{ steps.set-docker-tag.outputs.docker_image_tag }}

    steps:
      - name: Checkout service repository
        uses: actions/checkout@v4

      - name: Get last commit timestamp of Dockerfile
        id: dockerfile-commit
        run: |
          COMMIT_TIMESTAMP=$(git show -s --format='%Y%m%d%H%M%S' $COMMIT_HASH -- Dockerfile)
          echo "COMMIT_TIMESTAMP=$COMMIT_TIMESTAMP" >> $GITHUB_ENV
          echo $COMMIT_TIMESTAMP

      - name: Get last push timestamp of Docker image from GHCR
        id: image-push-timestamp
        run: |
        
          # Ensure jq is installed
          sudo apt-get update && sudo apt-get install -y jq
      
          # Fetch the timestamp and convert it
          LAST_PUSH_TIMESTAMP=$(curl -s -H "Authorization: token ${{ secrets.GHCR_PAT }}" \
            "https://api.github.com/orgs/niranjanorgground/packages/container/${{ inputs.IMAGE_NAME }}/versions" | \
            jq -r '.[0].created_at' | xargs -I {} date -d {} +'%Y%m%d%H%M%S')
      
          # Set the environment variable for subsequent steps
          echo "LAST_PUSH_TIMESTAMP=$LAST_PUSH_TIMESTAMP" >> $GITHUB_ENV
      
          # Print the timestamp for debugging
          echo "Last push timestamp: $LAST_PUSH_TIMESTAMP"

      - name: Compare timestamps and push to registry
        id: set-docker-tag
        run: |
          if [ "$COMMIT_TIMESTAMP" -gt "$LAST_PUSH_TIMESTAMP" ]; then
            echo "Dockerfile has been updated. Building a new image."
            docker_image_tag=$(date +'%Y%m%d%H%M%S')
            echo "docker_image_tag=$docker_image_tag" >> $GITHUB_ENV
            docker build -t ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:latest -t ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:$docker_image_tag -f $GITHUB_WORKSPACE/Dockerfile .
            # Log in to GitHub Container Registry
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
            # Push both tags to GHCR
            docker push ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:latest
            docker push ghcr.io/niranjanorgground/${{ inputs.IMAGE_NAME }}:$docker_image_tag
          else
            echo "No update to Dockerfile. Using latest image."
            echo "The Dockerfile is last updated on $COMMIT_TIMESTAMP"
          fi
