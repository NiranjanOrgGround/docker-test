name: ARC Scaleset Creation with Docker Image Check

on:
  workflow_dispatch:
    inputs:
      IMAGE_NAME:
        description: 'Docker image name'
        required: true

jobs:
  check-and-build-docker-image:
    runs-on: ubuntu-latest
    outputs:
      docker_image_tag: ${{ steps.set-docker-tag.outputs.docker_image_tag }}

    steps:
      # - name: Set up variables
      #   id: set-docker-tag
      #   run: echo "docker_image_tag=latest" >> $GITHUB_ENV

      - name: Checkout service repository
        uses: actions/checkout@v4

      - name: Get last commit timestamp of Dockerfile
        id: dockerfile-commit
        run: |
          echo "COMMIT_TIMESTAMP=$(git -C $GITHUB_WORKSPACE log -1 --format="%ct" -- Dockerfile)" >> $GITHUB_ENV 
          echo ${{ env.COMMIT_TIMESTAMP }}

      - name: Get last push timestamp of Docker image from GHCR
        id: image-push-timestamp
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "PUSH_TIMESTAMP=$(curl -H "Authorization: token YOUR_GITHUB_TOKEN" "https://api.github.com/orgs/niranjanorgground/packages/container/IMAGE_NAME/versions" | jq -r '.[0].created_at' | xargs -I {} date -d {} +'%Y%m%d%H%M')" >> $GITHUB_ENV
          echo ${{env.PUSH_TIMESTAMP}}

      - name: Compare timestamps and push to registery
        id: set-docker-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ env.COMMIT_TIMESTAMP }}" -gt "${{ env.PUSH_TIMESTAMP }}" ]; then
            echo "Dockerfile has been updated. Building a new image."
            echo "docker_image_tag=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

            docker build -t ghcr.io/$GITHUB_OWNER/$IMAGE_NAME:latest -t ghcr.io/$GITHUB_OWNER/$IMAGE_NAME:$docker_image_tag -f $GITHUB_WORKSPACE/Dockerfile
  
            # Log in to GitHub Container Registry
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin
  
            # Push both tags to GHCR
            docker push ghcr.io/$GITHUB_OWNER/$IMAGE_NAME:latest
            docker push ghcr.io/$GITHUB_OWNER/$IMAGE_NAME:$docker_image_tag
          else
            echo "No update to Dockerfile. Using latest image."
            echo "The Dockerfile is last updated on $COMMIT_TIMESTAMP"
          fi

      # - name: Log selected Docker tag
      #   run: echo "Using Docker tag: ${{ env.docker_image_tag }}"

      # - name: Build and push Docker image if updated
      #   if: ${{ env.docker_image_tag != 'latest' }}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     TIMESTAMP_TAG=${{ env.docker_image_tag }}
      #     IMAGE_PATH=ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.IMAGE_NAME }}

      #     # Build the Docker image and tag it with both 'latest' and the timestamp
      #     docker build -t $IMAGE_PATH:latest -t $IMAGE_PATH:$TIMESTAMP_TAG service-repo/

      #     # Log in to GitHub Container Registry
      #     echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      #     # Push both tags to GHCR
      #     docker push $IMAGE_PATH:latest
      #     docker push $IMAGE_PATH:$TIMESTAMP_TAG

  # arc-scaleset-creation:
  #   runs-on: ubuntu-latest
  #   needs: check-and-build-docker-image

  #   steps:
  #     - name: Create ARC scaleset with Docker image
  #       env:
  #         DOCKER_IMAGE_TAG: ${{ needs.check-and-build-docker-image.outputs.docker_image_tag }}
  #       run: |
  #         # Example command to create ARC scaleset with Docker image as input
  #         ./create_arc_scaleset.sh --image-tag $DOCKER_IMAGE_TAG
